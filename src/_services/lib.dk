#include "dkli.dkh"
#!
module "lib.dk"
{
	#!
	api_base_service::
    {
        expose responseJSONdata

        new responseJSONdata
        {
            @"success":@true
        }
        
        that
        
        @http_context<"response/headers/Content-Type">:"application/json;charset=utf-8"
        @http_context<"response/output">:"text"
        @http_context<"response/text">: to.json(responseJSONdata)
    }

    #!
    crm.post_action::&db,&params,&postData
    {
        if @@(params,"pipeline_id")==""{ref newpipeline=crm.create_pipeline(db,params,postData)}
        else{ref newpipeline=crm.create_stage(db,params,postData)}

        return newpipeline
    }

    #!
    crm.patch_action::&db,&params,&postData
    {
        ref newdata=crm.update_pipeline(db,params,postData)
        return newdata
    }

    #!
    crm.del_action::&db,&params,&postData
    {
        
        if @@(params,"stage_id")!=""{do crm.delete_stage(db,params)}
        else{do crm.delete_pipeline(db,params)}
        
        return crm.get_pipelines(db,params)
    }


    #!
    open.db::qname
    {
        module
        {
            do reset()
            exception{}
        }
        if qname!=""{return dbr.open(qname)}
        
        return dbr.open(@@(@config,"connection"))
    }

    #!
    crm.get_pipelines::&db,&params
    {
        if @@(params,"pipeline_id")!=""{ref pipelines=dbr.list(db,ftext(@get_pipeline),params)}
        else{ref pipelines=dbr.list(db,ftext(@list_pipelines),params)}

        for i=0;i<@count(pipelines)
        {
            ref pipeline=@item(pipelines,i)
            pipeline<"stages*">:crm.get_pipeline_stages(db,params)
        }
        return pipelines
    }

    #!
    crm.get_pipeline_stages::&db,&params
    {
        if @@(params,"stage_id")!=""{ref stages=dbr.list(db,ftext(@get_stage),params)}
        if @@(params,"pipeline_id")!=""{ref stages=dbr.list(db,ftext(@get_stage),params)}
        else{ref stages=dbr.list(db,ftext(@list_stages),params)}
        
        return stages
    }

    #!
    crm.create_pipeline::&db,&params,&postData
    {
        postData<"uuid">:cut(uuid(),31)
        do dbr.execute(db,ftext(@insert_pipeline),postData)
        @keyfield="sys_guid"
        params<"pipeline_id">:@@(postData,"uuid")
        return crm.get_pipeline_stages(db,params)
    }

    #!
    crm.create_stage::&db,&params,&postData
    {
        postData<"ref_pipeline">:@@(params,"pipeline_id")
        postData<"uuid">:cut(uuid(),31)
        do dbr.execute(db,ftext(@insert_pipeline_stages),postData)
        return crm.get_pipeline_stages(db,params)
    }

    #!
    crm.update_pipeline::&db,&params,&postData
    {
        if @@(params,"stage_id")!=""{do crm.update_stage(db,params,postData)}
        else{do dbr.execute(db,ftext(@update_pipeline),postData)}
        
        return crm.get_pipelines(db,params)
    }

    #!
    crm.update_stage::&db,&params,&postData
    {
        @keyfield="ref_pipeline"
        postData<"pipeline_id">:@@(params,"pipeline_id")
        postData<"stage_id">:@@(params,"stage_id")
        do dbr.execute(db,ftext(@update_stage),postData)

    }

    #!
    crm.delete_pipeline::&db,&params
    {
        do dbr.execute(db,ftext(@delete_pipeline),params)
    }

    #!
    crm.delete_stage::&db,&params
    {
        do dbr.execute(db,ftext(@delete_stage),params)
    }

    point @post   to crm.post_action
    point @path   to crm.update_pipeline
    point @delete   to crm.delete_pipeline
    point @get     to crm.get_pipelines
    
   
}